name: users

table: |-
  (
    id          serial primary key,
    "uuid"      uuid not null default gen_random_uuid(),

    created_at	timestamptz not null default now(),
    updated_at	timestamptz not null default now(),

    name        text not null,
    email				text not null unique,
    avatar		  text,
    "password"	text not null, -- crypt('1234567', gen_salt('bf'))
    "role"      public.user_role not null default 'app_user',

    check (email ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
    check (length(password) < 512),
    check (role in ('app_user', 'app_admin'))
  )

index:
  - uuid

rls:
  - public.rls_select('users')
  - app_user.rls_update('users', 'id = request.user_id()')

view:
  - name: users
    define: |-
      create view api.users as
        select id, uuid, created_at, updated_at, name, role, avatar
        from data.users
    rest:
      - app_admin.rest_get('users')

  - name: me
    define: |-
      create view api.me as
        select id, uuid, created_at, updated_at, name, email, role, avatar from data.users
        where id = request.user_id() and role = request.role()::public.user_role
    rest:
      - app_user.rest_get('me')
      - app_admin.rest_get('me')
      - app_user.rest_patch('me', '(name)')
      - app_admin.rest_patch('me', '(name)')

notify:
  - id

trigger:
  update: trigger_update_update_at()
